name: Run Unit Tests

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: main

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '19'

    - name: Install dependencies
      run: npm install

    - name: Install Jest
      run: npm install jest

    - name: Run Unit Tests and Generate JSON Report
      run: npx jest --json --outputFile=jest-results.json

    - name: Fetch Existing Jest Results
      run: |
        if [ -f jest-results.json ]; then
          cp jest-results.json jest-results-existing.json
        fi

    - name: Format Jest JSON Report
      run: |
        node <<EOF
        const fs = require('fs');
        const path = require('path');

        const rawData = JSON.parse(fs.readFileSync('jest-results.json'));
        const formattedData = {
          timestamp: new Date().toISOString(),
          total: rawData.numTotalTests,
          passed: rawData.numPassedTests,
          failed: rawData.numFailedTests,
          skipped: rawData.numPendingTests,
          suites: rawData.testResults.map(suite => ({
            name: suite.name,
            passed: suite.numPassingTests,
            failed: suite.numFailingTests,
            tests: suite.assertionResults.map(test => ({
              name: test.fullName,
              status: test.status,
              errorMessage: test.failureMessages.join('\n') || null
            }))
          }))
        };

        const resultsFilePath = path.join('jest-results.json');
        let accumulatedResults = [];

        if (fs.existsSync(resultsFilePath)) {
          const existingData = JSON.parse(fs.readFileSync(resultsFilePath));
          accumulatedResults = existingData.concat(formattedData);
        } else {
          accumulatedResults.push(formattedData);
        }

        fs.writeFileSync(resultsFilePath, JSON.stringify(accumulatedResults, null, 2));
        EOF

    - name: Save Jest Results with Timestamp
      run: |
        timestamp=$(date +"%Y%m%d%H%M%S")
        cp formatted-jest-results.json "jest_$timestamp.json"
        echo "Saved Jest results as jest_$timestamp.json"

    - name: Insert Jest Results into Supabase
      run: |
        node <<EOF
        require('dotenv').config();
        const fetch = require('node-fetch');
        const fs = require('fs');

        const supabaseUrl = process.env.SUPABASE_URL;
        const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

        const jestResults = JSON.parse(fs.readFileSync('formatted-jest-results.json'));

        const payload = {
          total_tests: jestResults.total,
          passed_tests: jestResults.passed,
          failed_tests: jestResults.failed,
          skipped_tests: jestResults.skipped,
          results: jestResults.suites
        };

        fetch(`${supabaseUrl}/rest/v1/jest_results`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'apikey': supabaseKey,
            'Authorization': `Bearer ${supabaseKey}`
          },
          body: JSON.stringify(payload)
        })
        .then(response => {
          if (!response.ok) {
            throw new Error(`Failed to insert Jest results: ${response.statusText}`);
          }
          return response.json();
        })
        .then(data => console.log('Inserted Jest results:', data))
        .catch(error => console.error('Error:', error));
        EOF
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

name: Run Unit Tests

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: main

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '19'

    - name: Install dependencies
      run: npm install

    - name: Install Jest
      run: npm install jest

    - name: Run Unit Tests and Generate JSON Report
      run: npx jest --json --outputFile=jest-results.json

    - name: Fetch Existing Jest Results
      run: |
        if [ -f Testflow/data/jest-results.json ]; then
          cp Testflow/data/jest-results.json jest-results-existing.json
        fi

    - name: Format Jest JSON Report
      run: |
        node <<EOF
        const fs = require('fs');
        const path = require('path');

        const rawData = JSON.parse(fs.readFileSync('jest-results.json'));
        const formattedData = {
          timestamp: new Date().toISOString(),
          total: rawData.numTotalTests,
          passed: rawData.numPassedTests,
          failed: rawData.numFailedTests,
          skipped: rawData.numPendingTests,
          suites: rawData.testResults.map(suite => ({
            name: suite.name,
            passed: suite.numPassingTests,
            failed: suite.numFailingTests,
            tests: suite.assertionResults.map(test => ({
              name: test.fullName,
              status: test.status,
              errorMessage: test.failureMessages.join('\n') || null
            }))
          }))
        };

        const resultsFilePath = path.join('Testflow', 'data', 'jest-results.json');
        let accumulatedResults = [];

        if (fs.existsSync(resultsFilePath)) {
          const existingData = JSON.parse(fs.readFileSync(resultsFilePath));
          accumulatedResults = existingData.concat(formattedData);
        } else {
          accumulatedResults.push(formattedData);
        }

        fs.writeFileSync(resultsFilePath, JSON.stringify(accumulatedResults, null, 2));
        EOF

    - name: Clone Testflow Repository
      uses: actions/checkout@v3
      with:
        repository: nicklasfangerfisk/Testflow
        token: ${{ secrets.TESTFLOW }}
        path: Testflow

    - name: Ensure Jest Results Directory Exists
      run: |
        mkdir -p Testflow/data
        touch Testflow/data/jest-results.json

    - name: Debug: List Testflow Directory
      run: ls -la Testflow/data

    - name: Debug: Check Jest Results File
      run: |
        if [ -f Testflow/data/jest-results.json ]; then
          echo "File exists: Testflow/data/jest-results.json"
          cat Testflow/data/jest-results.json
        else
          echo "File does not exist: Testflow/data/jest-results.json"
        fi

    - name: Copy and Commit Jest Results
      run: |
        cp formatted-jest-results.json Testflow/data/jest-results.json
        cd Testflow
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add data/jest-results.json
        if ! git diff --cached --quiet; then
          git commit -m "Update Jest test results"
          git push
        fi

    - name: Save Jest Results with Timestamp
      run: |
        timestamp=$(date +"%Y%m%d%H%M%S")
        cp formatted-jest-results.json "Testflow/data/jest_$timestamp.json"
        cd Testflow
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add "data/jest_$timestamp.json"
        if ! git diff --cached --quiet; then
          git commit -m "Add Jest test results for $timestamp"
          git push
        fi
